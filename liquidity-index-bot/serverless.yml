service:
  name: liquidity-index-bot-aws

plugins:
  - serverless-step-functions
  - serverless-webpack
  - serverless-prune-plugin
  - serverless-dotenv-plugin 

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  prune:
    automatic: true
    number: 3

provider:
  name: aws
  runtime: nodejs10.x
  logRetentionInDays: 3
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource: "arn:aws:s3:::liquidity-index-bot/*"
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    S3_BUCKET_NAME: liquidity-index-bot

functions:
  configure: 
    handler: handler.configure
  takeScreenshot: 
    handler: handler.takeScreenshot
    timeout: 40 
  getSheetData: 
    handler: handler.getSheetData
    timeout: 20 
  tweet: 
    handler: handler.tweet
    timeout: 20 
  proxyCryptoCompare: 
    handler: handler.proxyCryptoCompare
    timeout: 20 
    events:
      - http:
          path: proxy-cryptocompare
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                url: true # the url to send a request on behalf 

stepFunctions:
  stateMachines:
    liquidity-index-bot:
      name: liquidity-index-bot
      events: # every 3 hours 
        - schedule: cron(0 1 * * ? *) 
        - schedule: cron(0 4 * * ? *) 
        - schedule: cron(0 7 * * ? *) 
        - schedule: cron(0 10 * * ? *) 
        - schedule: cron(0 13 * * ? *) 
        - schedule: cron(0 16 * * ? *) 
        - schedule: cron(0 19 * * ? *) 
        - schedule: cron(0 22 * * ? *) 
      definition:
        Comment: Start Liquidity Index Bot
        StartAt: Configure
        States:
          Configure:
            Type: Task 
            Parameters: "XRPMXN,XRPAUD,XRPPHP"
            Resource:
              Fn::GetAtt: [configure, Arn]
            Next: FetchEachPair
          FetchEachPair:
            Type: Map
            Next: Tweet
            InputPath: "$.body"
            MaxConcurrency: 2
            Iterator:
              StartAt: FetchData
              States:
                FetchData:
                  Type: Parallel
                  End: true
                  Branches:
                    -
                      StartAt: TakeScreenshot
                      States:
                        TakeScreenshot:
                          Type: Task
                          Resource:
                            Fn::GetAtt: [takeScreenshot, Arn] 
                          End: true
                          Retry:
                            - ErrorEquals: [States.ALL]
                              MaxAttempts: 5
                              IntervalSeconds: 3
                    -
                      StartAt: GetSheetData 
                      States:
                        GetSheetData:
                          Type: Task
                          Resource:
                            Fn::GetAtt: [getSheetData, Arn]
                          End: true
                          Retry:
                            - ErrorEquals: [States.ALL]
                              MaxAttempts: 5
                              IntervalSeconds: 3
          Tweet:
            Type: Task
            Resource:
              Fn::GetAtt: [tweet, Arn]
            End: true
